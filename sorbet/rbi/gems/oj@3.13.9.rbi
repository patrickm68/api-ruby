# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `oj` gem.
# Please instead update this file by running `bin/tapioca gem oj`.

JSON::Parser = JSON::Ext::Parser
JSON::State = JSON::Ext::Generator::State

module Oj
  private

  def add_to_json(*_arg0); end
  def compat_load(*_arg0); end
  def default_options; end
  def default_options=(_arg0); end
  def dump(*_arg0); end
  def fast_generate(*_arg0); end
  def generate(*_arg0); end
  def load(*_arg0); end
  def load_file(*_arg0); end
  def mimic_JSON(*_arg0); end
  def object_load(*_arg0); end
  def optimize_rails; end
  def register_odd(*_arg0); end
  def register_odd_raw(*_arg0); end
  def remove_to_json(*_arg0); end
  def safe_load(_arg0); end
  def saj_parse(*_arg0); end
  def sc_parse(*_arg0); end
  def strict_load(*_arg0); end
  def to_file(*_arg0); end
  def to_json(*_arg0); end
  def to_stream(*_arg0); end
  def wab_load(*_arg0); end

  class << self
    def add_to_json(*_arg0); end
    def compat_load(*_arg0); end
    def default_options; end
    def default_options=(_arg0); end
    def dump(*_arg0); end
    def fast_generate(*_arg0); end
    def generate(*_arg0); end
    def load(*_arg0); end
    def load_file(*_arg0); end
    def mimic_JSON(*_arg0); end
    def mimic_loaded(mimic_paths = T.unsafe(nil)); end
    def object_load(*_arg0); end
    def optimize_rails; end
    def register_odd(*_arg0); end
    def register_odd_raw(*_arg0); end
    def remove_to_json(*_arg0); end
    def safe_load(_arg0); end
    def saj_parse(*_arg0); end
    def sc_parse(*_arg0); end
    def strict_load(*_arg0); end
    def to_file(*_arg0); end
    def to_json(*_arg0); end
    def to_stream(*_arg0); end
    def wab_load(*_arg0); end
  end
end

class Oj::Bag
  def initialize(args = T.unsafe(nil)); end

  def ==(other); end
  def eql?(other); end
  def method_missing(m, *args, &block); end
  def respond_to?(m); end

  class << self
    def define_class(classname); end
  end
end

class Oj::CStack; end
Oj::CUSTOM_MIMIC_JSON_OPTIONS = T.let(T.unsafe(nil), Hash)
class Oj::Cache; end
class Oj::DepthError < ::Oj::Error; end

class Oj::Doc
  def clone; end
  def close; end
  def dump(*_arg0); end
  def dup; end
  def each_child(*_arg0); end
  def each_leaf(*_arg0); end
  def each_value(*_arg0); end
  def exists?(_arg0); end
  def fetch(*_arg0); end
  def home; end
  def local_key; end
  def move(_arg0); end
  def path; end
  def size; end
  def type(*_arg0); end
  def where; end
  def where?; end

  class << self
    def open(_arg0); end
    def open_file(_arg0); end
    def parse(_arg0); end
  end
end

class Oj::EasyHash < ::Hash
  def initialize; end

  def [](key); end
  def method_missing(m, *args, &block); end
  def respond_to?(m, include_all = T.unsafe(nil)); end
end

class Oj::Error < ::StandardError; end
class Oj::LoadError < ::Oj::Error; end

class Oj::MimicDumpOption < ::Hash
  def initialize; end

  def []=(key, value); end
end

class Oj::MimicError < ::Oj::Error; end
class Oj::ParseError < ::Oj::Error; end

class Oj::Parser
  def file(_arg0); end
  def just_one; end
  def just_one=(_arg0); end
  def load(_arg0); end
  def method_missing(*_arg0); end
  def parse(_arg0); end

  private

  def new(*_arg0); end
  def saj; end
  def usual; end
  def validate; end

  class << self
    def new(*_arg0); end
    def saj; end
    def usual; end
    def validate; end
  end
end

module Oj::Rails
  private

  def deoptimize(*_arg0); end
  def encode(*_arg0); end
  def mimic_JSON; end
  def optimize(*_arg0); end
  def optimized?(_arg0); end
  def set_decoder; end
  def set_encoder; end

  class << self
    def deoptimize(*_arg0); end
    def encode(*_arg0); end
    def mimic_JSON; end
    def optimize(*_arg0); end
    def optimized?(_arg0); end
    def set_decoder; end
    def set_encoder; end
  end
end

class Oj::Rails::Encoder
  def deoptimize(*_arg0); end
  def encode(_arg0); end
  def optimize(*_arg0); end
  def optimized?(_arg0); end

  private

  def new(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Oj::Saj
  def initialize; end

  private

  def add_value(value, key); end
  def array_end(key); end
  def array_start(key); end
  def error(message, line, column); end
  def hash_end(key); end
  def hash_start(key); end
end

class Oj::ScHandler
  def initialize; end

  private

  def add_value(value); end
  def array_append(a, value); end
  def array_end; end
  def array_start; end
  def hash_end; end
  def hash_key(key); end
  def hash_set(h, key, value); end
  def hash_start; end
end

class Oj::StreamWriter
  def flush; end
  def pop; end
  def pop_all; end
  def push_array(*_arg0); end
  def push_json(*_arg0); end
  def push_key(_arg0); end
  def push_object(*_arg0); end
  def push_value(*_arg0); end

  private

  def new(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Oj::StringWriter
  def as_json; end
  def pop; end
  def pop_all; end
  def push_array(*_arg0); end
  def push_json(*_arg0); end
  def push_key(_arg0); end
  def push_object(*_arg0); end
  def push_value(*_arg0); end
  def raw_json; end
  def reset; end
  def to_s; end

  private

  def new(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

Oj::VERSION = T.let(T.unsafe(nil), String)

class String
  include ::Comparable
  include ::JSON::Ext::Generator::GeneratorMethods::String
  extend ::JSON::Ext::Generator::GeneratorMethods::String::Extend

  def to_json_raw(*_arg0); end
  def to_json_raw_object; end

  class << self
    def json_create(obj); end
  end
end
